<% @courses.each do |course| %>
    <tr class="course" id=<%= course.id %>>
        <td><%= course.course_code %></td>
        <td><%= course.title %></td>
        <td><%= course.checkIfBlank("professor_names", true)%></td>
        <td><%= course.cleanOneStat("gut_index") %></td>
        <td><%= course.classifyGut %></td>
        <td><%= course.cleanOneStat("gut_percentile", true) %></td>
        <td><%= course.cleanOneStat("gut_percentile_subject", true)%></td>
        <td><%= course.cleanOneStat("average_rating") %></td>
        <td><%= course.cleanOneStat("average_professor") %></td>
        <td><%= course.classifyProf %></td>
        <td><%= course.cleanOneStat("professor_percentile", true) %></td>
        <td><%= course.cleanOneStat("professor_percentile_subject", true) %></td>
        <td><%= course.cleanOneStat("average_workload") %></td>
        <td><%= course.classifyWork %></td>
        <td><%= course.cleanOneStat("workload_percentile", true) %></td>
        <td><%= course.cleanOneStat("workload_percentile_subject", true) %></td>
        <td><%= course.cleanOneStat("last_enrollment")%></td>


        <td><%= course.combineSkillsAndAreas %></td>

    </tr>

<% end %>



<script>

    let titleNew = document.querySelector('h1#table-title')

    titleNew.dataset.id = '<%= @courses.first.season_code %>'

    titleNew.textContent = '<%= Course.season_to_str(@courses.first.season_code) %>' + " Catalog"


    const OFFSET = 150
    const body = document.querySelector('div#main-body')
    const table = document.querySelector('tbody#catalog-body')
    const seasons_dropdown = document.querySelector('ul#seasons-btn')

    body.addEventListener('click', event => {
        
        if (event.target.matches('tr.course td')) {
            const tr = event.target.closest('tr.course')

            window.location.replace(`http://127.0.0.1:3000/courses/${tr.id}`)
        }
    })

    seasons_dropdown.addEventListener('click', event => {
        if (event.target.matches('li.season')) {
            const season = parseInt(event.target.dataset.id)
        
            window.location.replace(`http://127.0.0.1:3000/courses/${season}/new_season_home`)
        }
    })

    function createOneCourse(course) {
        // add table row
        const tr = document.createElement('tr')
        tr.classList.add('course')
        tr.dataset.id = course.id
        
        // get profs
        let profs;
        course.professor_names === "" ? profs = "TBA" : profs = course.professor_names

        // handle first few data eles
        if (course.gut_index != null) {
            tr.innerHTML = `
            <td>${course.course_code}</td>
            <td>${course.title}</td>
            <td>${profs}</td>
            <td>${course.gut_index.toFixed(2)}%</td>
            <td>${classifyGut(course)}</td>
            <td>${ordinal(course.gut_percentile)}</td>
            <td>${ordinal(course.gut_percentile_subject)}</td>
            
        `
        }
        else {
            tr.innerHTML = `
            <td>${course.course_code}</td>
            <td>${course.title}</td>
            <td>${profs}</td>
            <td>N/A</td>
            <td>${classifyGut(course)}</td>
            <td>N/A</td>
            <td>N/A</td>
        `
        }

        // create the rest of the eles w/ artisianal method
        createTableEle(course, "average_rating_same_professors", tr)
        createTableEle(course, "average_professor", tr)
        createTableEleClassed(classifyProf(course), tr)
        createTableEle(course, "professor_percentile", tr, true)
        createTableEle(course, "professor_percentile_subject", tr, true)
        createTableEle(course, "average_workload", tr)
        createTableEleClassed(classifyWork(course), tr)
        createTableEle(course, "workload_percentile", tr, true)
        createTableEle(course, "workload_percentile_subject", tr, true)

        // hanfle profs ratings, change if same prof
        if (course.last_enrollment_same_professors){
            createTableEle(course, "last_enrollment", tr, false, true)
        }
        else {
            createTableEle(course, "last_enrollment", tr, false, true, true)
        }

        // combine skills and areas
        let skills_and_areas;
        if (course.areas === "" && course.skills === "" ) {
            skills_and_areas = "N/A"
        } else if ( course.skills === "") {
            skills_and_areas = course.areas.replace(',','')
        } else if ( course.areas === "") {
            skills_and_areas = course.skills.replace(',','')
        }
        else {
            skills_and_areas = course.areas.replace(',','') + " " + course.skills.replace(',','')
        }

        // append the skills and areas table header
        const td_areas_and_skills = document.createElement('td')
        td_areas_and_skills.textContent = skills_and_areas
        tr.append(td_areas_and_skills)


        table.appendChild(tr)
    }

    // CREATE A TABLE ELEMENT
    // HANDLES RANK STYLING, ESTIMATION (ADDING ~ TO ENROLLMENT), AND INTEGER VS FLOAT
    function createTableEle(obj, category, outerDiv, rank=false, reg_int=false, estimated=false) {
        const td = document.createElement('td')
        if (obj[category] != null) {
            if (!rank) {    
                if (!reg_int) {
                    // handle float val
                    td.innerHTML = `<td>${obj[category].toFixed(2)}</td>`
                }
                else if (!estimated) {
                    // handle non estimation
                    td.innerHTML = `<td>${obj[category]}</td>`
                }
                else {
                    // handle estimation
                    td.innerHTML = `<td>~${obj[category]}</td>`
                }
            }
            else {
                // handle percentile
                td.innerHTML = `<td>${ordinal(obj[category])}</td>`
            }
        }
        else {
            // handle null val
            td.innerHTML = `<td>N/A</td>` 
        }

        outerDiv.append(td)
    }

    // CLASSIFY A TABLE ELE
    // creates the guttiness, grading, and workload vals
    function createTableEleClassed(classification, outerDiv) {

        const td = document.createElement('td')
        td.innerHTML = `<td>${classification}</td>`

        outerDiv.append(td)
    }
        // CLASSIFICATION OF GUTS, PROFS, AND WORKLOAD
    function classifyGut(course) {
        if (course["gut_percentile"] === null || course["gut_percentile_subject"] === null) {
            return "N/A"
        }
        else if (course["gut_percentile"] >= 75 && course["gut_percentile_subject"] >= 50 && (course["workload_percentile"] != null && course["workload_percentile"] <= 25)
            && (course["workload_percentile_subject"] != null && course["workload_percentile_subject"] <= 50) && (course["professor_percentile"] != null && course["professor_percentile"] >= 75)
            && (course["professor_percentile_subject"] != null && course["professor_percentile_subject"] >= 50)) {
            
            return "Gut"
        }   
        else if ((100 >= course["gut_percentile"] && course["gut_percentile"] >= 67) || (100 >= course["gut_percentile_subject"] && course["gut_percentile_subject"] >= 67)) {
            return "Relaxed"
        }
        else if ((67 > course["gut_percentile"] && course["gut_percentile"] > 33) || (67 > course["gut_percentile_subject"] && course["gut_percentile"] > 33)) {
            return "Average"
        }
        else if (course["gut_percentile"] <= 25 && course["gut_percentile_subject"] < 50 && (course["workload_percentile"] != null && course["workload_percentile"] >= 75)
        && (course["workload_percentile_subject"] != null && course["workload_percentile_subject"] > 50) && (course["professor_percentile"] != null && course["professor_percentile"] <= 25)
                && (course["professor_percentile_subject"] != null && course["professor_percentile_subject"] < 50)) {
            return "Grueling"
        }
        else {
        // case when (33 >= course["gut_percentile"] >= 0) || (33 >= course["gut_percentile_subject"] >= 0)
            return "Challenging"
        }
    }

    function classifyProf(course) {
        if (course["professor_percentile"] === null || course["professor_percentile_subject"] === null) {
            return "N/A"
        }
        else if (course["professor_percentile"] >= 75 && course["professor_percentile_subject"] >= 50 && (course["workload_percentile"] != null && course["workload_percentile"] <= 25)
            && (course["workload_percentile_subject"] != null && course["workload_percentile_subject"] <= 50) && (course["professor_percentile"] != null && course["professor_percentile"] >= 75)) {
            return "Exceptional"
        }   
        else if ((100 >= course["professor_percentile"] && course["professor_percentile"] >= 67) || (100 >= course["professor_percentile_subject"] && course["professor_percentile_subject"] >= 67)) {
            return "Good"
        }
        else if ((67 > course["professor_percentile"] && course["professor_percentile"] > 33) || (67 > course["professor_percentile_subject"] && course["professor_percentile"] > 33)) {
            return "Average"
        }
        else if (course["professor_percentile"] <= 25 && course["professor_percentile_subject"] < 50 && (course["workload_percentile"] != null && course["workload_percentile"] >= 75)
        && (course["workload_percentile_subject"] != null && course["workload_percentile_subject"] > 50) && (course["professor_percentile"] != null && course["professor_percentile"] <= 25)) {
            return "Harsh"
        }
        else {
        // case when (33 >= course["gut_percentile"] >= 0) || (33 >= course["gut_percentile_subject"] >= 0)
            return "Tough"
        }
    }

    function classifyWork(course) {
        if (course["workload_percentile"] === null || course["workload_percentile_subject"] === null) {
            return "N/A"
        }
        else if (course["workload_percentile"] >= 67 && course["workload_percentile_subject"] >= 67) {
            return "Heavy"
        }   
        else if ((67 > course["workload_percentile"] && course["workload_percentile"] >= 33) && (67 > course["workload_percentile_subject"] && course["workload_percentile_subject"] >= 33)) {
            return "Average"
        }
        else if ((course["workload_percentile"] < 33) && (course["workload_percentile_subject"] < 33)) {
            return "Light"
        }
        else if (course["workload_percentile"] > 50 && course["workload_percentile_subject"] >= 67){
            return "Relatively Harsh"
        }
        else if (course["workload_percentile"] < 50 && course["workload_percentile_subject"] <= 33){
            return "Relatively Light"
        }
        else {
        // case when (33 >= course["gut_percentile"] >= 0) || (33 >= course["gut_percentile_subject"] >= 0)
            return "Relatively Average"
        }
    }


    // CHANGE RANK NUMS TO ORDINAL
    function ordinal(n) {
        var s = ["th", "st", "nd", "rd"];
        var v = n%100;
        return n + (s[(v-20)%10] || s[v] || s[0]);
    }

    function loadMoreCourses(season) {
        fetch(`http://127.0.0.1:3000/courses/${season}/${OFFSET}/load_more`)
        .then(r => r.json())
        .then(courses => {
            courses.forEach(createOneCourse)
            document.querySelector('tr#spinner-container').remove()

        })
    }
        
    

    let firstView = true

var observer = new IntersectionObserver(function(entries) {
	if((entries[0].isIntersecting === true) && firstView) {
		console.log('Element is fully visible in screen');

        const spinnerContainer = document.createElement('tr')

        spinnerContainer.id = "spinner-container"
        spinnerContainer.innerHTML = `
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td class="mt-3">          
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>

        `




        table.append(spinnerContainer)
        loadMoreCourses("<%= params[:season] %>")
        firstView = false

        
    }
    
}, { threshold: [1] });

const trArr = document.querySelectorAll('tbody#catalog-body tr')



observer.observe(trArr[trArr.length-1].querySelector('td'));
</script>
