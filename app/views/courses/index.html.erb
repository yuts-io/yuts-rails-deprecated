
<% @courses.each do |course| %>
    <tr class="course" data-id=<%= course.id %>>
        <td><%= course.course_code %></td>
        <td><%= course.title %></td>
        <td><%= course.checkIfBlank("professor_names", true)%></td>
        <% if String(course.cleanOneStat("gut_index")) != "N/A" %>
            <td><%= String(course.cleanOneStat("gut_index")) + "%"%></td>
        <% else %>
            <td><%= course.cleanOneStat("gut_index")%></td>
        <% end %>
        <td><%= course.classifyGut %></td>
        <td><%= course.cleanOneStat("gut_percentile", true) %></td>
        <td><%= course.cleanOneStat("gut_percentile_subject", true)%></td>
        <td><%= course.cleanOneStat("average_rating") %></td>
        <td><%= course.cleanOneStat("average_professor") %></td>
        <td><%= course.classifyProf %></td>
        <td><%= course.cleanOneStat("professor_percentile", true) %></td>
        <td><%= course.cleanOneStat("professor_percentile_subject", true) %></td>
        <td><%= course.cleanOneStat("average_workload") %></td>
        <td><%= course.classifyWork %></td>
        <td><%= course.cleanOneStat("workload_percentile", true) %></td>
        <td><%= course.cleanOneStat("workload_percentile_subject", true) %></td>
        <td><%= course.cleanOneStat("last_enrollment")%></td>


        <td><%= course.combineSkillsAndAreas %></td>

    </tr>

<% end %>
<script>
    const OFFSET = 250
    let gutActive = false
    let coursesLoaded = false
    const body = document.querySelector('div#main-body')
    const table = document.querySelector('tbody#catalog-body')
    const seasons_dropdown = document.querySelector('ul#seasons-btn')
    const gutSwitch = document.querySelector('div.form-switch input')
    const searchBar = document.querySelector('form#searchForm')

    const sortList = document.querySelector('ul.sort-list')

    const pageTitle = document.querySelector('h1#table-title')

    pageTitle.textContent = "<%= Course.season_to_str(@courses.first.season_code) %>" + " Catalog"
    pageTitle.dataset.id = "<%= @courses.first.season_code %>"


    body.addEventListener('click', event => {
        
        if (event.target.matches('tr.course td')) {
            const tr = event.target.closest('tr.course')

            window.location.replace(`http://127.0.0.1:3000/courses/${tr.dataset.id}`)
        }
    })

    seasons_dropdown.addEventListener('click', event => {
        if (event.target.matches('li.season')) {
            const season = parseInt(event.target.dataset.id)
            // const title = document.querySelector('h1#table-title')

            // title.dataset.id = event.target.dataset.id

            // title.textContent = event.target.textContent + " Catalog"

            
        
            window.location.replace(`http://127.0.0.1:3000/courses/season/${season}`)
        }
    })

    function createOneCourse(course) {
        // add table row
        const tr = document.createElement('tr')
        tr.classList.add('course')
        tr.dataset.id = course.id
        
        // get profs
        let profs;
        course.professor_names === "" ? profs = "TBA" : profs = course.professor_names

        // handle first few data eles
        if (course.gut_index != null) {
            tr.innerHTML = `
            <td>${course.course_code}</td>
            <td>${course.title}</td>
            <td>${profs}</td>
            <td>${course.gut_index.toFixed(2)}%</td>
            <td>${classifyGut(course)}</td>
            <td>${ordinal(course.gut_percentile)}</td>
            <td>${ordinal(course.gut_percentile_subject)}</td>
            
        `
        }
        else {
            tr.innerHTML = `
            <td>${course.course_code}</td>
            <td>${course.title}</td>
            <td>${profs}</td>
            <td>N/A</td>
            <td>${classifyGut(course)}</td>
            <td>N/A</td>
            <td>N/A</td>
        `
        }

        // create the rest of the eles w/ artisianal method
        createTableEle(course, "average_rating", tr)
        createTableEle(course, "average_professor", tr)
        createTableEleClassed(classifyProf(course), tr)
        createTableEle(course, "professor_percentile", tr, true)
        createTableEle(course, "professor_percentile_subject", tr, true)
        createTableEle(course, "average_workload", tr)
        createTableEleClassed(classifyWork(course), tr)
        createTableEle(course, "workload_percentile", tr, true)
        createTableEle(course, "workload_percentile_subject", tr, true)

        // hanfle profs ratings, change if same prof
        if (course.last_enrollment_same_professors){
            createTableEle(course, "last_enrollment", tr, false, true)
        }
        else {
            createTableEle(course, "last_enrollment", tr, false, true, true)
        }

        // combine skills and areas
        let skills_and_areas;
        if (course.areas === "" && course.skills === "" ) {
            skills_and_areas = "N/A"
        } else if ( course.skills === "") {
            skills_and_areas = course.areas.replace(',','')
        } else if ( course.areas === "") {
            skills_and_areas = course.skills.replace(',','')
        }
        else {
            skills_and_areas = course.areas.replace(',','') + " " + course.skills.replace(',','')
        }

        // append the skills and areas table header
        const td_areas_and_skills = document.createElement('td')
        td_areas_and_skills.textContent = skills_and_areas
        tr.append(td_areas_and_skills)


        table.append(tr)
    }

    // CREATE A TABLE ELEMENT
// HANDLES RANK STYLING, ESTIMATION (ADDING ~ TO ENROLLMENT), AND INTEGER VS FLOAT
function createTableEle(obj, category, outerDiv, rank=false, reg_int=false, estimated=false) {
    const td = document.createElement('td')
    if (obj[category] != null) {
        if (!rank) {    
            if (!reg_int) {
                // handle float val
                td.innerHTML = `<td>${obj[category].toFixed(2)}</td>`
            }
            else if (!estimated) {
                // handle non estimation
                td.innerHTML = `<td>${obj[category]}</td>`
            }
            else {
                // handle estimation
                td.innerHTML = `<td>~${obj[category]}</td>`
            }
        }
        else {
            // handle percentile
            td.innerHTML = `<td>${ordinal(obj[category])}</td>`
        }
    }
    else {
        // handle null val
        td.innerHTML = `<td>N/A</td>` 
    }

    outerDiv.append(td)
}

// CLASSIFY A TABLE ELE
// creates the guttiness, grading, and workload vals
function createTableEleClassed(classification, outerDiv) {

    const td = document.createElement('td')
    td.innerHTML = `<td>${classification}</td>`

    outerDiv.append(td)
}
    // CLASSIFICATION OF GUTS, PROFS, AND WORKLOAD
function classifyGut(course) {
    if (course["gut_percentile"] === null || course["gut_percentile_subject"] === null) {
        return "N/A"
    }
    else if (course["gut_percentile"] >= 75 && course["gut_percentile_subject"] >= 50 && (course["workload_percentile"] != null && course["workload_percentile"] <= 25)
        && (course["workload_percentile_subject"] != null && course["workload_percentile_subject"] <= 50) && (course["professor_percentile"] != null && course["professor_percentile"] >= 75)
        && (course["professor_percentile_subject"] != null && course["professor_percentile_subject"] >= 50)) {
        
        return "Gut"
    }   
    else if ((100 >= course["gut_percentile"] && course["gut_percentile"] >= 67) || (100 >= course["gut_percentile_subject"] && course["gut_percentile_subject"] >= 67)) {
        return "Relaxed"
    }
    else if ((67 > course["gut_percentile"] && course["gut_percentile"] > 33) || (67 > course["gut_percentile_subject"] && course["gut_percentile"] > 33)) {
        return "Average"
    }
    else if (course["gut_percentile"] <= 25 && course["gut_percentile_subject"] < 50 && (course["workload_percentile"] != null && course["workload_percentile"] >= 75)
    && (course["workload_percentile_subject"] != null && course["workload_percentile_subject"] > 50) && (course["professor_percentile"] != null && course["professor_percentile"] <= 25)
            && (course["professor_percentile_subject"] != null && course["professor_percentile_subject"] < 50)) {
        return "Grueling"
    }
    else {
    // case when (33 >= course["gut_percentile"] >= 0) || (33 >= course["gut_percentile_subject"] >= 0)
        return "Challenging"
    }
}

function classifyProf(course) {
    if (course["professor_percentile"] === null || course["professor_percentile_subject"] === null) {
        return "N/A"
    }
    else if (course["professor_percentile"] >= 75 && course["professor_percentile_subject"] >= 50 && (course["workload_percentile"] != null && course["workload_percentile"] <= 25)
        && (course["workload_percentile_subject"] != null && course["workload_percentile_subject"] <= 50) && (course["professor_percentile"] != null && course["professor_percentile"] >= 75)) {
        return "Exceptional"
    }   
    else if ((100 >= course["professor_percentile"] && course["professor_percentile"] >= 67) || (100 >= course["professor_percentile_subject"] && course["professor_percentile_subject"] >= 67)) {
        return "Good"
    }
    else if ((67 > course["professor_percentile"] && course["professor_percentile"] > 33) || (67 > course["professor_percentile_subject"] && course["professor_percentile"] > 33)) {
        return "Average"
    }
    else if (course["professor_percentile"] <= 25 && course["professor_percentile_subject"] < 50 && (course["workload_percentile"] != null && course["workload_percentile"] >= 75)
    && (course["workload_percentile_subject"] != null && course["workload_percentile_subject"] > 50) && (course["professor_percentile"] != null && course["professor_percentile"] <= 25)) {
        return "Harsh"
    }
    else {
    // case when (33 >= course["gut_percentile"] >= 0) || (33 >= course["gut_percentile_subject"] >= 0)
        return "Tough"
    }
}

function classifyWork(course) {
    if (course["workload_percentile"] === null || course["workload_percentile_subject"] === null) {
        return "N/A"
    }
    else if (course["workload_percentile"] >= 67 && course["workload_percentile_subject"] >= 67) {
        return "Heavy"
    }   
    else if ((67 > course["workload_percentile"] && course["workload_percentile"] >= 33) && (67 > course["workload_percentile_subject"] && course["workload_percentile_subject"] >= 33)) {
        return "Average"
    }
    else if ((course["workload_percentile"] < 33) && (course["workload_percentile_subject"] < 33)) {
        return "Light"
    }
    else if (course["workload_percentile"] > 50 && course["workload_percentile_subject"] >= 67){
        return "Relatively Harsh"
    }
    else if (course["workload_percentile"] < 50 && course["workload_percentile_subject"] <= 33){
        return "Relatively Light"
    }
    else {
    // case when (33 >= course["gut_percentile"] >= 0) || (33 >= course["gut_percentile_subject"] >= 0)
        return "Relatively Average"
    }
}




// CHANGE RANK NUMS TO ORDINAL
function ordinal(n) {
    var s = ["th", "st", "nd", "rd"];
    var v = n%100;
    return n + (s[(v-20)%10] || s[v] || s[0]);
}

// ADD OBSERVER

var observer = new IntersectionObserver(function(entries) {
	if((entries[0].isIntersecting === true)) {
		console.log('Element is fully visible in screen');

        const spinnerContainer = document.createElement('tr')

        spinnerContainer.id = "spinner-container"
        spinnerContainer.innerHTML = `
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td class="mt-3">          
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
        `




        

        if (coursesLoaded === false) {
            table.append(spinnerContainer)
            const sorter = document.querySelector('ul#sorter-list li.active').textContent

            const title = document.querySelector('h1#table-title')

            const season = title.dataset.id

            if (sorter === "Gut Index") {
                loadSortMoreCourses(season, "gut_index", "DESC")
            } else if (sorter === "Overall Rating") {
                loadSortMoreCourses(season, "average_rating", "DESC")
            } else if (sorter === "Professor Rating") {
                loadSortMoreCourses(season, "average_professor", "DESC")
            } else if (sorter === "Work Rating") {
                loadSortMoreCourses(season, "average_workload", "ASC")
            } else if (sorter === "Course Code") {
                loadSortMoreCourses(season, "course_code", "ASC")
            }

            coursesLoaded = true
        }


        
    }
    
}, { threshold: [1] });

function startObserve() {
    let trArr = document.querySelectorAll('tbody#catalog-body tr:not([style*="display: none;"]')
    observer.unobserve(trArr[trArr.length-1].querySelector('td'))
    trArr = document.querySelectorAll('tbody#catalog-body tr:not([style*="display: none;"]')

    // if (document.querySelector('input#searchBar').value === "") {
    console.log('<%= params[:search_val]%>')

        observer.observe(trArr[trArr.length-1].querySelector('td'));
    // } 
}

startObserve()

// FILTER AND SEARCH

function filterGut(undo=false) {
    
    const searchBar = document.querySelector('input#searchBar')
    const filter = searchBar.value.toUpperCase()
    const rows = document.querySelectorAll("tbody#catalog-body tr.course")

    // iterate thru each table row, if the row has a search term in a td
    // show it, else make its style hidden


    if (undo) {
        for (let i = 0; i < rows.length; i++) {
            rows[i].style.display = ""
        }
    }  else {

        for (let i = 0; i < rows.length; i++) {
        // const codeEle = rows[i].getElementsByTagName("td")[0]
        // const titleEle = rows[i].getElementsByTagName("td")[1]
        // const profEle = rows[i].getElementsByTagName("td")[2]

        const guttinessEle = rows[i].getElementsByTagName("td")[4]

        // const txtValueCode = codeEle.textContent || codeEle.innerText
        // const txtValueTitle= titleEle.textContent || titleEle.innerText
        // const txtValueProf = profEle.textContent || profEle.innerText

        const txtValueGuttiness = guttinessEle.textContent || guttinessEle.innerText

        if (txtValueGuttiness === "Gut") {
            rows[i].style.display = ""
        } else {
            rows[i].style.display = "none"
        }
    } 
    }

    if (!coursesLoaded) {
        startObserve()
    }
    

}


// LOAD COURSES AFTER OFFSET
function loadMoreCourses(season, gutFilter=false) {
    fetch(`http://127.0.0.1:3000/courses/${season}/${OFFSET}/load_more`)
    .then(r => r.json())
    .then(courses => {
        const searchBar = document.querySelector('input#searchBar')
        
        courses.forEach(createOneCourse)

        if (gutActive) {
            filterGut()
        }


    })
}

function loadSortCourses(season, sorter, direction) {
    fetch(`http://127.0.0.1:3000/courses/sort_init/${season}/${sorter}/${direction}`)
    .then(r => r.json())
    .then(courses => {
        
        courses.forEach(createOneCourse)

        filterGut(undo=true)

        if (gutActive) {
            filterGut()
        }

        if (searchBar.value != "") {
            search()
        }
    })
}

function loadSortMoreCourses(season, sorter, direction) {
    fetch(`http://127.0.0.1:3000/courses/sort_more/${season}/${sorter}/${direction}`)
    .then(r => r.json())
    .then(courses => {
        courses.forEach(createOneCourse)

        filterGut(undo=true)

        if (gutActive) {
            filterGut()
        }

        if (searchBar.value != "") {
            search()
        }

        if (document.querySelector('tr#spinner-container')) {
            document.querySelector('tr#spinner-container').remove()
        }



        

    })
}



// observe on page load 


// ADD EVENT SEARCH LISTENER

function search(undo=false) {
    
    const searchBar = document.querySelector('input#searchBar')
    const filter = searchBar.value.toUpperCase()
    const rows = document.querySelectorAll('tbody#catalog-body tr.course:not([style*="display: none;"]')
    console.log(rows);

    // iterate thru each table row, if the row has a search term in a td
    // show it, else make its style hidden
    for (let i = 0; i < rows.length; i++) {
        const codeEle = rows[i].getElementsByTagName("td")[0]
        const titleEle = rows[i].getElementsByTagName("td")[1]
        const profEle = rows[i].getElementsByTagName("td")[2]

        const txtValueCode = codeEle.textContent || codeEle.innerText
        const txtValueTitle= titleEle.textContent || titleEle.innerText
        const txtValueProf = profEle.textContent || profEle.innerText

        if (txtValueCode.toUpperCase().indexOf(filter) > -1 || txtValueTitle.toUpperCase().indexOf(filter) > -1 || txtValueProf.toUpperCase().indexOf(filter) > -1) {
            rows[i].style.display = ""
        } else {
            rows[i].style.display = "none"
        }


    } 



    if (undo) {
        for (let i = 0; i < rows.length; i++) {
            rows[i].style.display = ""
        }
    } 

    

    if (!coursesLoaded) {
        if (document.querySelectorAll('tbody#catalog-body tr.course:not([style*="display: none;"]').length > 0) {
            startObserve()
        } else {
            const spinnerContainer = document.createElement('tr')

            spinnerContainer.id = "spinner-container"
            spinnerContainer.innerHTML = `
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td class="mt-3">          
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            `
            table.append(spinnerContainer)
            const sorter = document.querySelector('ul#sorter-list li.active').textContent

            const title = document.querySelector('h1#table-title')

            const season = title.dataset.id

            if (sorter === "Gut Index") {
                loadSortMoreCourses(season, "gut_index", "DESC")
            } else if (sorter === "Overall Rating") {
                loadSortMoreCourses(season, "average_rating", "DESC")
            } else if (sorter === "Professor Rating") {
                loadSortMoreCourses(season, "average_professor", "DESC")
            } else if (sorter === "Work Rating") {
                loadSortMoreCourses(season, "average_workload", "ASC")
            } else if (sorter === "Course Code") {
                loadSortMoreCourses(season, "course_code", "ASC")
            }

            coursesLoaded = true
        }
    }
}



searchBar.addEventListener('submit', event => {
    event.preventDefault()
    filterGut(undo=true)

    if (gutActive === true) {
        filterGut()
    } 


    console.log(event.target[0].value)

    if (event.target[0].value != "") {   
        search()
    }

})




gutSwitch.addEventListener('click', event => {
    const title = document.querySelector('h1#table-title')

    const season = title.dataset.id
    filterGut()
    

    if (gutActive) {
        filterGut(undo=true)
        gutActive = false
        
        gutSwitch.classList.add('active')
        // loadMoreCourses(season)
    } else {
        gutActive = true
        gutSwitch.classList.remove('active')
        if (coursesLoaded === false) {
            // loadMoreCourses(season, true)
            // coursesLoaded = true
        }
    }

    if (searchBar.value != "") {
        search()
    }

    
    

})

sortList.addEventListener('click', event => {
    if (event.target.matches('li')) {


        if (coursesLoaded === true) {
            coursesLoaded = false
        }

        const sorter = event.target.textContent
        const title = document.querySelector('h1#table-title')
        const season = title.dataset.id

        const activeSorted = document.querySelector('ul#sorter-list li.active')

        activeSorted.classList.remove('active')

        event.target.classList.add('active')

        table.innerHTML = ""
        if (sorter === "Gut Index") {
            loadSortCourses(season, "gut_index", "DESC")
            if (coursesLoaded === false) {
                const spinnerContainer = document.createElement('tr')

                spinnerContainer.id = "spinner-container"
                spinnerContainer.innerHTML = `
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td class="mt-3">          
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                `
                table.append(spinnerContainer)
                loadSortMoreCourses(season, "gut_index", "DESC")
                coursesLoaded = true
            }
        } else if (sorter === "Overall Rating") {
            loadSortCourses(season, "average_rating", "DESC")
                        if (coursesLoaded === false) {
                const spinnerContainer = document.createElement('tr')

                spinnerContainer.id = "spinner-container"
                spinnerContainer.innerHTML = `
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td class="mt-3">          
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                `
                table.append(spinnerContainer)
                loadSortMoreCourses(season, "average_rating", "DESC")
                coursesLoaded = true
            }
        } else if (sorter === "Professor Rating") {
            loadSortCourses(season, "average_professor", "DESC")
                        if (coursesLoaded === false) {
                const spinnerContainer = document.createElement('tr')

                spinnerContainer.id = "spinner-container"
                spinnerContainer.innerHTML = `
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td class="mt-3">          
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                `
                table.append(spinnerContainer)
                loadSortMoreCourses(season, "average_professor", "DESC")
                coursesLoaded = true
            }
        } else if (sorter === "Work Rating") {
            loadSortCourses(season, "average_workload", "ASC")
                        if (coursesLoaded === false) {
                const spinnerContainer = document.createElement('tr')

                spinnerContainer.id = "spinner-container"
                spinnerContainer.innerHTML = `
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td class="mt-3">          
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                `
                table.append(spinnerContainer)
                loadSortMoreCourses(season, "average_workload", "ASC")
                coursesLoaded = true
            }
        } else if (sorter === "Course Code") {
            loadSortCourses(season, "course_code", "ASC")
                        if (coursesLoaded === false) {
                const spinnerContainer = document.createElement('tr')

                spinnerContainer.id = "spinner-container"
                spinnerContainer.innerHTML = `
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td class="mt-3">          
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                `
                table.append(spinnerContainer)
                loadSortMoreCourses(season, "course_code", "ASC")
                coursesLoaded = true
            }
        }



        // startObserve()
        
    }
})

// loadMoreCourses("202103")
    
</script>